#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan 11 13:06:20 2021

@author: Zhijie
"""

import random
import numpy as np
import matplotlib.pyplot as plt
from mytransport import transport

############## input varaibles #########################
tauv=1
taus=5
Cap=50 #the capacity of each elevator, not using "capacity" to prevent confusion by looping variable
F=100 #total number of floors
n=1 #number of elevators
######################################################## 

def fmax(f,capacity): #exact formula of average f_max defined by summation
    summation=0
    down=f**capacity
    for i in range(f):
        summation+=i**capacity/down 
    return (f-summation)

fmaxlist=[]

for capacity in range(101):
    fmaxlist.append(fmax(F,capacity)) 

fmax=fmaxlist[Cap]
ratelimit=n/(taus+2*fmax*tauv/(Cap))

############## input the rates to be shown ##############
ratelist=[ratelimit*0.95,ratelimit*0.97,ratelimit*0.98]

def waitmorestep(waitingT_,Time):
    global N,time,newcome
    extratime=np.random.exponential(1/rate)
    for i in range(n):
        Time[i]=max(Time[i]-extratime,0)
    time+=extratime#??
    newcome=1
    waitingT_=waitingT_+[0]
    N=1
    return waitingT_,Time

def updatetime(Time,waitingT_,population,waitingR_,popT_): #time1 is always lower than time2
    global N,time,Naway
    time=np.min(Time)

    newcome=np.random.poisson(rate*time)
    N+=newcome
    if len(popT_):popT_=list(np.array(popT_)+time)
    popT_+=list(np.random.uniform(0,time,size=newcome))
    if N==0:
            waitingT_,Time_=waitmorestep(waitingT_,Time)
            population=[1]
            
     
    else:population=[newcome]+population
    Naway=min(N,Cap)
    N-=Naway
    taus=np.mean(np.random.uniform(4,6,size=Naway))
    waitingT_,waitingR_,population,popT_=transport(waitingT_,waitingR_,population,popT_,Naway)
    pos=np.max(np.random.random_integers(1,F,size=Naway))

    choice=[]
    for i in range(n):
        Time[i]=max(Time[i]-time,0)
        if Time[i]==0:choice.append(i)
    
    elevator=random.choice(choice)
    Time[elevator]=2*tauv*pos+Naway*taus 
            
     
    return Time, waitingT_,population,waitingR_,popT_,elevator

Time=np.zeros(n)

####### Input number of iteration ####################

Total=10000 #number of iteration
######################################
ClearingP=[]
ratelist=np.linspace(ratelimit*0.5,ratelimit*0.99,num=50)
for rate in ratelist:
    N=1
    waitingT_=[]#time from a person arrive to geting on the elevator
    waitingR_=np.zeros(10000)#number of rounds waited before getting on elevator
    time=0
    #initialize the time1 time2 from given N_0
    pos=np.max(np.random.random_integers(1,F,size=N)) #pos is the max floor need to be reached
    if n==1:elevator=0
    else:elevator=np.random.randint(0,n)
    Time[elevator]=2*tauv*pos+N*taus
    population=[N]
    popT_=list(np.zeros(N))
    count=0
    for i in range(int(Total)):
        
        Time, waitingT_,population,waitingR_,popT_,elevator=updatetime(Time,waitingT_,population,waitingR_,popT_)
        if N==0:count+=1
            
    ClearingP.append(count/Total)   
    
plt.figure(figsize=(4,3))   
plt.plot(ratelist,ClearingP,label="simulation")
plt.xlabel(r"$\lambda$")
plt.ylabel(r"P",fontweight='bold')
plt.legend()